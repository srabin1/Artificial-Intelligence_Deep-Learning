{"cells":[{"cell_type":"markdown","metadata":{"id":"LbZcI9ZXHl3a"},"source":["# Deep Q-Learning for Lunar Landing"]},{"cell_type":"markdown","metadata":{"id":"E8yPRjteXgPb"},"source":["## Part 0 - Installing the required packages and importing the libraries"]},{"cell_type":"markdown","source":["Most AI libraries and packages are installed in Google colab but we need to install gymnasium"],"metadata":{"id":"rOJ-u9_7X-MM"}},{"cell_type":"markdown","metadata":{"id":"slEm5teGWjWU"},"source":["### Installing Gymnasium"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"dbnq3XpoKa_7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1722366161289,"user_tz":300,"elapsed":139221,"user":{"displayName":"Sanaz Rabinia","userId":"18423678739563779329"}},"outputId":"071fe03c-82ed-40fc-b612-bbd76f788ce6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting gymnasium\n","  Downloading gymnasium-0.29.1-py3-none-any.whl.metadata (10 kB)\n","Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium) (1.26.4)\n","Requirement already satisfied: cloudpickle>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium) (2.2.1)\n","Requirement already satisfied: typing-extensions>=4.3.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium) (4.12.2)\n","Collecting farama-notifications>=0.0.1 (from gymnasium)\n","  Downloading Farama_Notifications-0.0.4-py3-none-any.whl.metadata (558 bytes)\n","Downloading gymnasium-0.29.1-py3-none-any.whl (953 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m953.9/953.9 kB\u001b[0m \u001b[31m4.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading Farama_Notifications-0.0.4-py3-none-any.whl (2.5 kB)\n","Installing collected packages: farama-notifications, gymnasium\n","Successfully installed farama-notifications-0.0.4 gymnasium-0.29.1\n","Requirement already satisfied: gymnasium[accept-rom-license,atari] in /usr/local/lib/python3.10/dist-packages (0.29.1)\n","Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium[accept-rom-license,atari]) (1.26.4)\n","Requirement already satisfied: cloudpickle>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium[accept-rom-license,atari]) (2.2.1)\n","Requirement already satisfied: typing-extensions>=4.3.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium[accept-rom-license,atari]) (4.12.2)\n","Requirement already satisfied: farama-notifications>=0.0.1 in /usr/local/lib/python3.10/dist-packages (from gymnasium[accept-rom-license,atari]) (0.0.4)\n","Collecting autorom~=0.4.2 (from autorom[accept-rom-license]~=0.4.2; extra == \"accept-rom-license\"->gymnasium[accept-rom-license,atari])\n","  Downloading AutoROM-0.4.2-py3-none-any.whl.metadata (2.8 kB)\n","Collecting shimmy<1.0,>=0.1.0 (from shimmy[atari]<1.0,>=0.1.0; extra == \"atari\"->gymnasium[accept-rom-license,atari])\n","  Downloading Shimmy-0.2.1-py3-none-any.whl.metadata (2.3 kB)\n","Requirement already satisfied: click in /usr/local/lib/python3.10/dist-packages (from autorom~=0.4.2->autorom[accept-rom-license]~=0.4.2; extra == \"accept-rom-license\"->gymnasium[accept-rom-license,atari]) (8.1.7)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from autorom~=0.4.2->autorom[accept-rom-license]~=0.4.2; extra == \"accept-rom-license\"->gymnasium[accept-rom-license,atari]) (2.31.0)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from autorom~=0.4.2->autorom[accept-rom-license]~=0.4.2; extra == \"accept-rom-license\"->gymnasium[accept-rom-license,atari]) (4.66.4)\n","Collecting AutoROM.accept-rom-license (from autorom[accept-rom-license]~=0.4.2; extra == \"accept-rom-license\"->gymnasium[accept-rom-license,atari])\n","  Downloading AutoROM.accept-rom-license-0.6.1.tar.gz (434 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m434.7/434.7 kB\u001b[0m \u001b[31m2.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n","  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","Collecting ale-py~=0.8.1 (from shimmy[atari]<1.0,>=0.1.0; extra == \"atari\"->gymnasium[accept-rom-license,atari])\n","  Downloading ale_py-0.8.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (8.1 kB)\n","Requirement already satisfied: importlib-resources in /usr/local/lib/python3.10/dist-packages (from ale-py~=0.8.1->shimmy[atari]<1.0,>=0.1.0; extra == \"atari\"->gymnasium[accept-rom-license,atari]) (6.4.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->autorom~=0.4.2->autorom[accept-rom-license]~=0.4.2; extra == \"accept-rom-license\"->gymnasium[accept-rom-license,atari]) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->autorom~=0.4.2->autorom[accept-rom-license]~=0.4.2; extra == \"accept-rom-license\"->gymnasium[accept-rom-license,atari]) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->autorom~=0.4.2->autorom[accept-rom-license]~=0.4.2; extra == \"accept-rom-license\"->gymnasium[accept-rom-license,atari]) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->autorom~=0.4.2->autorom[accept-rom-license]~=0.4.2; extra == \"accept-rom-license\"->gymnasium[accept-rom-license,atari]) (2024.7.4)\n","Downloading AutoROM-0.4.2-py3-none-any.whl (16 kB)\n","Downloading Shimmy-0.2.1-py3-none-any.whl (25 kB)\n","Downloading ale_py-0.8.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.7 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m18.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hBuilding wheels for collected packages: AutoROM.accept-rom-license\n","  Building wheel for AutoROM.accept-rom-license (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for AutoROM.accept-rom-license: filename=AutoROM.accept_rom_license-0.6.1-py3-none-any.whl size=446662 sha256=c4eac1186e473c11bddb0a9e2c73104f30af1fada166ebd224bab3aaadf984ff\n","  Stored in directory: /root/.cache/pip/wheels/6b/1b/ef/a43ff1a2f1736d5711faa1ba4c1f61be1131b8899e6a057811\n","Successfully built AutoROM.accept-rom-license\n","Installing collected packages: ale-py, shimmy, AutoROM.accept-rom-license, autorom\n","Successfully installed AutoROM.accept-rom-license-0.6.1 ale-py-0.8.1 autorom-0.4.2 shimmy-0.2.1\n","Reading package lists... Done\n","Building dependency tree... Done\n","Reading state information... Done\n","The following additional packages will be installed:\n","  swig4.0\n","Suggested packages:\n","  swig-doc swig-examples swig4.0-examples swig4.0-doc\n","The following NEW packages will be installed:\n","  swig swig4.0\n","0 upgraded, 2 newly installed, 0 to remove and 45 not upgraded.\n","Need to get 1,116 kB of archives.\n","After this operation, 5,542 kB of additional disk space will be used.\n","Get:1 http://archive.ubuntu.com/ubuntu jammy/universe amd64 swig4.0 amd64 4.0.2-1ubuntu1 [1,110 kB]\n","Get:2 http://archive.ubuntu.com/ubuntu jammy/universe amd64 swig all 4.0.2-1ubuntu1 [5,632 B]\n","Fetched 1,116 kB in 1s (920 kB/s)\n","Selecting previously unselected package swig4.0.\n","(Reading database ... 123588 files and directories currently installed.)\n","Preparing to unpack .../swig4.0_4.0.2-1ubuntu1_amd64.deb ...\n","Unpacking swig4.0 (4.0.2-1ubuntu1) ...\n","Selecting previously unselected package swig.\n","Preparing to unpack .../swig_4.0.2-1ubuntu1_all.deb ...\n","Unpacking swig (4.0.2-1ubuntu1) ...\n","Setting up swig4.0 (4.0.2-1ubuntu1) ...\n","Setting up swig (4.0.2-1ubuntu1) ...\n","Processing triggers for man-db (2.10.2-1) ...\n","Requirement already satisfied: gymnasium[box2d] in /usr/local/lib/python3.10/dist-packages (0.29.1)\n","Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium[box2d]) (1.26.4)\n","Requirement already satisfied: cloudpickle>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium[box2d]) (2.2.1)\n","Requirement already satisfied: typing-extensions>=4.3.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium[box2d]) (4.12.2)\n","Requirement already satisfied: farama-notifications>=0.0.1 in /usr/local/lib/python3.10/dist-packages (from gymnasium[box2d]) (0.0.4)\n","Collecting box2d-py==2.3.5 (from gymnasium[box2d])\n","  Downloading box2d-py-2.3.5.tar.gz (374 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m374.4/374.4 kB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: pygame>=2.1.3 in /usr/local/lib/python3.10/dist-packages (from gymnasium[box2d]) (2.6.0)\n","Collecting swig==4.* (from gymnasium[box2d])\n","  Downloading swig-4.2.1-py2.py3-none-manylinux_2_5_x86_64.manylinux1_x86_64.whl.metadata (3.6 kB)\n","Downloading swig-4.2.1-py2.py3-none-manylinux_2_5_x86_64.manylinux1_x86_64.whl (1.9 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.9/1.9 MB\u001b[0m \u001b[31m18.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hBuilding wheels for collected packages: box2d-py\n","  Building wheel for box2d-py (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for box2d-py: filename=box2d_py-2.3.5-cp310-cp310-linux_x86_64.whl size=2349142 sha256=ec99ffb55420d234d4e72c28e8bbade690c9e50429962fa316a8fd2221fca923\n","  Stored in directory: /root/.cache/pip/wheels/db/8f/6a/eaaadf056fba10a98d986f6dce954e6201ba3126926fc5ad9e\n","Successfully built box2d-py\n","Installing collected packages: swig, box2d-py\n","Successfully installed box2d-py-2.3.5 swig-4.2.1\n"]}],"source":["!pip install gymnasium\n","!pip install \"gymnasium[atari, accept-rom-license]\"\n","!apt-get install -y swig\n","!pip install gymnasium[box2d]"]},{"cell_type":"markdown","metadata":{"id":"brqiMN3UW9T9"},"source":["### Importing the libraries"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"mZaKXP_aMl9O","executionInfo":{"status":"ok","timestamp":1722366225383,"user_tz":300,"elapsed":4403,"user":{"displayName":"Sanaz Rabinia","userId":"18423678739563779329"}}},"outputs":[],"source":["import os\n","import random\n","import numpy as np\n","import torch # build and train AI models with PyTorch\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch.nn.functional as F\n","import torch.autograd as autograd\n","from torch.autograd import Variable\n","from collections import deque, namedtuple"]},{"cell_type":"markdown","metadata":{"id":"EzlDKXvkXzGI"},"source":["## Part 1 - Building the AI"]},{"cell_type":"markdown","metadata":{"id":"UtG6Zc83YYy3"},"source":["### Creating the architecture of the Neural Network"]},{"cell_type":"code","source":["# architecture is the brain of our AI\n","class Network(nn.Module):\n","\n","  def __init__(self, state_size, action_size, seed =42) : #-> None: nothing will be returned\n","     # find the observation space and action size from gymnasium\n","      super(Network, self).__init__()\n","      self.seed = torch.manual_seed(seed)\n","      # fcl : first full connection between input layer and first hidden layer\n","      self.fc1 = nn.Linear(state_size, 64) # there is no rule of thumb for 64\n","      self.fc2 = nn.Linear(64, 64) # second fully connected layer\n","      self.fc3 = nn.Linear(64, action_size) # third fully connected layer, connected to output layer\n","\n","  def forward(self, state):\n","    #propagate the signal from the input layer to the first fully connected layer\n","    x = self.fc1(state)\n","    x = F.relu(x) # relu is a rectifier activation function\n","    # propagate from the first fully connected layer to the second one\n","    x = self.fc2(x)\n","    x = F.relu(x)\n","    return self.fc3(x)\n"],"metadata":{"id":"aEbqQy2PZMjh","executionInfo":{"status":"ok","timestamp":1722368906629,"user_tz":300,"elapsed":143,"user":{"displayName":"Sanaz Rabinia","userId":"18423678739563779329"}}},"execution_count":15,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UxVrBnFWZKb1"},"source":["## Part 2 - Training the AI"]},{"cell_type":"markdown","metadata":{"id":"T364fz9qZb2j"},"source":["### Setting up the environment"]},{"cell_type":"code","source":["import gymnasium as gym\n","env = gym.make('LunarLander-v2') # grab the name of environment from gymnasium\n","state_shape = env.observation_space.shape\n","state_size =  env.observation_space.shape[0]\n","number_actions = env.action_space.n\n","print('State shape: ', state_shape)\n","print('State size: ', state_size)\n","print('Number of actions: ', number_actions)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JG3Wk5YrmI64","executionInfo":{"status":"ok","timestamp":1722368908457,"user_tz":300,"elapsed":179,"user":{"displayName":"Sanaz Rabinia","userId":"18423678739563779329"}},"outputId":"99cb0d25-3d99-4781-b600-863d0ea24389"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["State shape:  (8,)\n","State size:  8\n","Number of actions:  4\n"]}]},{"cell_type":"markdown","metadata":{"id":"c_dZmOIvZgj-"},"source":["### Initializing the hyperparameters"]},{"cell_type":"code","source":["learning_rate = 5e-4 # after a lot of explanation is the best practice\n","minibatch_size = 100 # again this is the best practice\n","discount_factor = 0.99  # this is our gamma\n","replay_buffer_size = int(1e5) # this is the memory of AI (agent) to improve the learning process\n","interpolation_parameter = 1e-3"],"metadata":{"id":"ywAGU2ronJ9c","executionInfo":{"status":"ok","timestamp":1722368909763,"user_tz":300,"elapsed":148,"user":{"displayName":"Sanaz Rabinia","userId":"18423678739563779329"}}},"execution_count":17,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8hD_Vs-bYnip"},"source":["### Implementing Experience Replay"]},{"cell_type":"code","source":["class ReplayMemory(object):\n","\n","  def __init__(self, capacity):\n","    self.device = torch.device(\"cuda: 0\" if torch.cuda.is_available() else \"cpu\")\n","    self.capacity = capacity # capacity is the maximum size of the memory buffer\n","    self.memory = []\n","\n","  def push(self, event):\n","    self.memory.append(event)\n","    # to make sure that the memory of the buffer doesn't exceed the capacity\n","    if len(self.memory) > self.capacity:\n","      del self.memory[0] # delete it\n","\n","  def sample(self, batch_size):\n","    experiences = random.sample(self.memory, k = batch_size)\n","    # extract and stack the elements one by one\n","    # and then convert it to PyTorch tensor\n","    # the data type should be set to float\n","    states = torch.from_numpy(np.vstack([e[0] for e in experiences if e is not None])).float().to(self.device)\n","    actions = torch.from_numpy(np.vstack([e[1] for e in experiences if e is not None])).long().to(self.device)\n","    rewards = torch.from_numpy(np.vstack([e[2] for e in experiences if e is not None])).float().to(self.device)\n","    next_states = torch.from_numpy(np.vstack([e[3] for e in experiences if e is not None])).float().to(self.device)\n","    dones = torch.from_numpy(np.vstack([e[4] for e in experiences if e is not None]).astype(np.uint8)).float().to(self.device)\n","    # to convert to boolean variable: astype(np.uint8)\n","    return states, next_states, actions, rewards, dones"],"metadata":{"id":"EHvfxzC9n7Yi","executionInfo":{"status":"ok","timestamp":1722369334555,"user_tz":300,"elapsed":135,"user":{"displayName":"Sanaz Rabinia","userId":"18423678739563779329"}}},"execution_count":22,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JmEkbFbUY6Jt"},"source":["### Implementing the DQN class"]},{"cell_type":"code","source":["class Agent():\n","\n","  def __init__(self, state_size, action_size):\n","    self.device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","    self.state_size = state_size\n","    self.action_size = action_size\n","    # create two Q networks: local and target\n","    self.local_qnetwork = Network(state_size, action_size).to(self.device)\n","    self.target_qnetwork = Network(state_size, action_size).to(self.device)\n","    self.optimizer = optim.Adam(self.local_qnetwork.parameters(), lr= learning_rate) # use Adam optimizer\n","    self.memory = ReplayMemory(replay_buffer_size)\n","    # define and initialize the time step\n","    self.t_step = 0\n","\n","  # step method\n","  def step(self, state, action, reward, next_state, done):\n","    #store experiences in replay memory\n","    self.memory.push((state, action, reward, next_state, done))\n","    # when to learn? increment and reset it every 4 steps to learn\n","    self.t_step = (self.t_step + 1) % 4\n","    if self.t_step == 0:\n","      # time to learn on one observation only (mini batch)\n","      if len(self.memory.memory) > minibatch_size:\n","        experiences = self.memory.sample(100)\n","        # learn from those experiences\n","        self.learn(experiences, discount_factor)\n","\n","  def act(self, state, epsilon = 0.): # we are using the epsilon-greedy function\n","    state = torch.from_numpy(state).float().unsqueeze(0).to(self.device) #in which dimension we want this bath to be?\n","    self.local_qnetwork.eval()\n","    with torch.no_grad(): # any gradient function is disabled\n","      action_values = self.local_qnetwork(state)\n","    self.local_qnetwork.train()\n","    if random.random() > epsilon:\n","      #select the action with highest Q value\n","      return np.argmax(action_values.cpu().data.numpy())\n","    else:\n","      return random.choice(np.arange(self.action_size))\n","  # implement the learn method of object class\n","  def learn(self, experiences, discount_factor):\n","    states, next_states, actions, rewards, dones = experiences\n","    next_q_targets = self.target_qnetwork(next_states).detach().max(1)[0].unsqueeze(1) # we use target_qnetwork\n","    q_targets = rewards + (discount_factor * next_q_targets * (1- dones))\n","    q_expected = self.local_qnetwork(states).gather(1, actions)\n","    loss = F.mse_loss(q_expected, q_targets)\n","    #initialize the optimizer\n","    self.optimizer.zero_grad()\n","    #backpropagation\n","    loss.backward()\n","    self.optimizer.step()\n","    self.soft_update(self.local_qnetwork, self.target_qnetwork, interpolation_parameter)\n","\n","  def soft_update(self, local_model, target_model, interpolation_parameter):\n","    for target_param, local_param in zip(target_model.parameters(), local_model.parameters()):\n","      target_param.data.copy_(interpolation_parameter * local_param.data + (1.0 - interpolation_parameter) * target_param.data)\n"],"metadata":{"id":"ZbZG27OOrFSQ","executionInfo":{"status":"ok","timestamp":1722369339892,"user_tz":300,"elapsed":122,"user":{"displayName":"Sanaz Rabinia","userId":"18423678739563779329"}}},"execution_count":23,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"o1tZElccZmf6"},"source":["### Initializing the DQN agent"]},{"cell_type":"code","source":["agent = Agent(state_size, number_actions)"],"metadata":{"id":"4atNlxykDnDq","executionInfo":{"status":"ok","timestamp":1722369342723,"user_tz":300,"elapsed":142,"user":{"displayName":"Sanaz Rabinia","userId":"18423678739563779329"}}},"execution_count":24,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"E8v0PtUfaVQp"},"source":["### Training the DQN agent"]},{"cell_type":"markdown","source":["The epsilon-greedy approach is a simple yet effective method used in reinforcement learning, primarily to balance exploration and exploitation. Here is how it works:\n","\n","Key Concepts\n","Exploration: Discovering new knowledge about the environment.\n","Exploitation: Using known knowledge to make decisions.\n","The Epsilon-Greedy Strategy\n","In the epsilon-greedy approach, a parameter\n","𝜖\n","ϵ (a small positive number, usually between 0.01 and 0.1) dictates the likelihood of taking a random action. This strategy helps an agent to explore the environment rather than always exploiting the best known action. Here is how the strategy operates:\n","\n","With probability ϵ (hence \"epsilon-greedy\"), the agent selects a random action. This is the exploration part, allowing the agent to try different things and potentially discover better strategies.\n","With probability 1−ϵ, the agent selects the best-known action based on the current policy or value function. This is the exploitation part, where the agent uses the best strategy it knows."],"metadata":{"id":"fp9qvQj5FXae"}},{"cell_type":"markdown","source":["https://gymnasium.farama.org/environments/box2d/lunar_lander/\n","\n","After every step a reward is granted. The total reward of an episode is the sum of the rewards for all the steps within that episode.\n","\n","For each step, the reward:\n","\n","is increased/decreased the closer/further the lander is to the landing pad.\n","\n","is increased/decreased the slower/faster the lander is moving.\n","\n","is decreased the more the lander is tilted (angle not horizontal).\n","\n","is increased by 10 points for each leg that is in contact with the ground.\n","\n","is decreased by 0.03 points each frame a side engine is firing.\n","\n","is decreased by 0.3 points each frame the main engine is firing.\n","\n","The episode receive an additional reward of -100 or +100 points for crashing or landing safely respectively.\n","\n","An episode is considered a solution if it scores at least 200 points."],"metadata":{"id":"FKwmbx4xGxjw"}},{"cell_type":"code","source":["# we need to train that brain with tools\n","# initialize the training parameters/ hyperparameters\n","number_episodes = 2000\n","maximum_number_timesteps_per_episode = 1000\n","epsilon_starting_value  = 1.0\n","epsilon_ending_value  = 0.01\n","epsilon_decay_value  = 0.995\n","epsilon = epsilon_starting_value\n","scores_on_100_episodes = deque(maxlen = 100)\n","\n","for episode in range(1, number_episodes + 1):\n","  state, _ = env.reset()\n","  score = 0\n","  for t in range(maximum_number_timesteps_per_episode):\n","    action = agent.act(state, epsilon)\n","    next_state, reward, done, _, _ = env.step(action)\n","    agent.step(state, action, reward, next_state, done)\n","    state = next_state\n","    score += reward\n","    if done:\n","      break\n","  scores_on_100_episodes.append(score)\n","  epsilon = max(epsilon_ending_value, epsilon_decay_value * epsilon)\n","  print('\\rEpisode {}\\tAverage Score: {:.2f}'.format(episode, np.mean(scores_on_100_episodes)), end = \"\")\n","  if episode % 100 == 0:\n","    print('\\rEpisode {}\\tAverage Score: {:.2f}'.format(episode, np.mean(scores_on_100_episodes)))\n","  if np.mean(scores_on_100_episodes) >= 200.0:\n","    print('\\nEnvironment solved in {:d} episodes!\\tAverage Score: {:.2f}'.format(episode - 100, np.mean(scores_on_100_episodes)))\n","    torch.save(agent.local_qnetwork.state_dict(), 'checkpoint.pth')\n","    break\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-rV-PwovD_a8","executionInfo":{"status":"ok","timestamp":1722370045947,"user_tz":300,"elapsed":700750,"user":{"displayName":"Sanaz Rabinia","userId":"18423678739563779329"}},"outputId":"11d5ebfc-6dc7-48ae-eece-321f9ed60c14"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["Episode 100\tAverage Score: -179.59\n","Episode 200\tAverage Score: -99.76\n","Episode 300\tAverage Score: -51.44\n","Episode 400\tAverage Score: -31.80\n","Episode 500\tAverage Score: -13.26\n","Episode 600\tAverage Score: 87.10\n","Episode 700\tAverage Score: 183.40\n","Episode 713\tAverage Score: 200.50\n","Environment solved in 613 episodes!\tAverage Score: 200.50\n"]}]},{"cell_type":"markdown","metadata":{"id":"O8CNwdOTcCoP"},"source":["## Part 3 - Visualizing the results"]},{"cell_type":"code","execution_count":26,"metadata":{"id":"cb9nVvU2Okhk","colab":{"base_uri":"https://localhost:8080/","height":459},"executionInfo":{"status":"ok","timestamp":1722370056281,"user_tz":300,"elapsed":5953,"user":{"displayName":"Sanaz Rabinia","userId":"18423678739563779329"}},"outputId":"96295837-7f28-475e-c6cb-fc12f2773397"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:imageio_ffmpeg:IMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (600, 400) to (608, 400) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<video alt=\"test\" autoplay\n","                loop controls style=\"height: 400px;\">\n","                <source src=\"data:video/mp4;base64,\" type=\"video/mp4\" />\n","             </video>"]},"metadata":{}}],"source":["import glob\n","import io\n","import base64\n","import imageio\n","from IPython.display import HTML, display\n","from gym.wrappers.monitoring.video_recorder import VideoRecorder\n","\n","def show_video_of_model(agent, env_name):\n","    env = gym.make(env_name, render_mode='rgb_array')\n","    state, _ = env.reset()\n","    done = False\n","    frames = []\n","    while not done:\n","        frame = env.render()\n","        frames.append(frame)\n","        action = agent.act(state)\n","        state, reward, done, _, _ = env.step(action.item())\n","    env.close()\n","    imageio.mimsave('video.mp4', frames, fps=30)\n","\n","show_video_of_model(agent, 'LunarLander-v2')\n","\n","def show_video():\n","    mp4list = glob.glob('*.mp4')\n","    if len(mp4list) > 0:\n","        mp4 = mp4list[0]\n","        video = io.open(mp4, 'r+b').read()\n","        encoded = base64.b64encode(video)\n","        display(HTML(data='''<video alt=\"test\" autoplay\n","                loop controls style=\"height: 400px;\">\n","                <source src=\"data:video/mp4;base64,{0}\" type=\"video/mp4\" />\n","             </video>'''.format(encoded.decode('ascii'))))\n","    else:\n","        print(\"Could not find video\")\n","\n","show_video()"]}],"metadata":{"colab":{"provenance":[{"file_id":"1IXSqYOFw40oO-rJW683jtVFEUV-A6ZDS","timestamp":1695853573029}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}